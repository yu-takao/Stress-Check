# Cursor Rules: ストレスチェック採点・可視化・AI コメント生成アプリ

## プロジェクト概要
職業性ストレス簡易調査票（57項目）に基づくストレスチェックの自動採点、スコア可視化、およびAI生成コメントを提供するWebアプリケーションを開発する。

## 技術スタック
- **フロントエンド**: Next.js + TypeScript
- **バックエンド**: AWS Amplify Gen2 (GraphQL/REST API)
- **生成AI**: AWS Bedrock (Claude 3 Sonnet推奨)
- **インフラ**: AWS Amplify Gen2 (Lambda, DynamoDB, S3等)
- **データベース**: DynamoDB
- **デプロイ**: AWS Amplify Gen2
- **認証**: Amplify Auth
- **UI/UX**: Tailwind CSS + shadcn/ui
- **グラフ表示**: Chart.js または Recharts

## 核心機能

### 1. ストレスチェック採点システム
- 職業性ストレス簡易調査票（57項目）の実装
- 3領域の採点機能：
  - **A領域**: 仕事のストレス要因（17項目）
  - **B領域**: 心身のストレス反応（29項目）  
  - **C領域**: 周囲のサポート（9項目）
- 逆転項目の自動処理
- 高ストレス者判定ロジック：
  - B領域 ≥ 77点 または
  - (A+C領域 ≥ 76点 かつ B領域 ≥ 63点)

### 2. スコア可視化
- レーダーチャート表示（3領域）
- 領域別棒グラフ
- 全国平均との比較表示
- 経年変化グラフ（履歴機能）
- ダッシュボード形式のスコア表示

### 3. AI コメント生成
- AWS Bedrock統合
- スコアに基づくパーソナライズされたアドバイス
- 改善提案の自動生成
- ストレス軽減のための具体的なアクション提案

## 開発方針

### セキュリティ
- 個人情報保護の徹底
- データの匿名化処理
- AWS WAF設定
- HTTPS通信の強制

### ユーザビリティ
- 直感的で分かりやすいUI
- レスポンシブデザイン
- アクセシビリティ対応
- 多言語対応（日本語・英語）

### パフォーマンス
- サーバーレスアーキテクチャ
- CDN活用による高速化
- 最適化されたデータベース設計
- キャッシュ機能の実装

## ファイル構成
```
/
├── app/              # Next.js 13+ App Router
│   ├── components/   # UIコンポーネント
│   ├── (pages)/      # ページコンポーネント
│   └── globals.css   # グローバルスタイル
├── amplify/          # Amplify Gen2設定
│   ├── auth/         # 認証設定
│   ├── data/         # データモデル・API定義
│   └── functions/    # Lambda関数
├── lib/              # ユーティリティ・型定義
│   ├── utils/        # 採点ロジック等
│   ├── types/        # TypeScript型定義
│   └── amplify/      # Amplify設定
├── public/           # 静的ファイル
└── docs/             # ドキュメント
```

## 採点ロジック詳細

### 質問項目と採点方式
- 4段階評価：「そうだ」「まあそうだ」「ややちがう」「ちがう」
- 通常項目：そうだ=4点、まあそうだ=3点、ややちがう=2点、ちがう=1点
- 逆転項目：そうだ=1点、まあそうだ=2点、ややちがう=3点、ちがう=4点

### 逆転項目一覧
**A領域（仕事のストレス要因）**: なし（全て通常採点）
**B領域（心身のストレス反応）**: なし（全て通常採点）
**C領域（周囲のサポート）**: 全9項目が逆転項目

### 実装時の注意点
- 回答の必須チェック
- 採点計算の正確性検証
- エラーハンドリングの実装
- ユーザー体験の最適化

## AWS Amplify Gen2 実装ガイドライン

### データモデル設計
- DynamoDB テーブル設計（ストレスチェック結果、ユーザー履歴）
- GraphQL スキーマ定義
- リアルタイム更新（Subscriptions）

### Lambda関数の役割
- **採点処理**: ストレスチェック結果の計算
- **AI統合**: Bedrock API呼び出し
- **データ集計**: 統計・分析処理

### セキュリティ設定
- Amplify Auth による認証
- IAM ロールの最小権限設定
- API アクセス制御
- データ暗号化

### デプロイメント
- Amplify Console での自動デプロイ
- 環境分離（dev/staging/prod）
- カスタムドメイン設定

## AI プロンプト設計
- 専門的かつ理解しやすい表現
- 具体的で実行可能なアドバイス
- ポジティブで建設的なトーン
- 個人情報を含まない一般的な助言

## コーディング規約

### 基本方針
- TypeScript strict mode使用
- ESLint + Prettier設定
- 関数型プログラミング推奨
- テストファーストアプローチ
- コメントは日本語で記述
- コミットメッセージは英語

### モジュール化・可読性ルール
- **最大行数**: 1ファイル400行以内（コメント・空行含む）
- **関数の最大行数**: 50行以内
- **関数の引数**: 最大5個まで（オブジェクト引数推奨）
- **ネストレベル**: 最大3階層まで
- **単一責任原則**: 1ファイル1つの責任・目的
- **Pure Functions優先**: 副作用を最小限に抑制

### ファイル・フォルダ命名規則
- **コンポーネント**: PascalCase（例: `StressCheckForm.tsx`）
- **ユーティリティ**: camelCase（例: `calculateScore.ts`）
- **定数ファイル**: UPPER_SNAKE_CASE（例: `STRESS_CONSTANTS.ts`）
- **型定義**: 接尾辞`.types.ts`（例: `stressCheck.types.ts`）
- **テスト**: 接尾辞`.test.ts`または`.spec.ts`

### コード構造ルール
- **Export規則**: named exportを優先、default exportは最小限
- **Import順序**: 外部ライブラリ → 内部ライブラリ → 相対パス
- **型定義**: インターface優先、type aliasは必要時のみ
- **Error Handling**: try-catch必須、適切なエラーメッセージ
- **ログ出力**: 開発用はconsole、本番用は構造化ログ

### パフォーマンス・品質ルール
- **React最適化**: useMemo, useCallback適切使用
- **バンドルサイズ**: dynamic import活用
- **型安全性**: any型禁止、unknown型推奨
- **テストカバレッジ**: 最低80%維持
- **コンポーネント設計**: Atomic Design原則適用

### ドキュメント・コメントルール
- **JSDoc**: 公開関数・クラスに必須
- **README**: 各ディレクトリに設置
- **型定義**: 複雑な型には説明コメント
- **ビジネスロジック**: 採点計算等には詳細コメント
- **API仕様**: OpenAPI/GraphQL schemaで文書化

## パフォーマンス目標
- 初回読み込み: < 3秒
- 採点処理: < 1秒
- AIコメント生成: < 5秒
- 可視化表示: < 2秒